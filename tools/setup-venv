#!/bin/bash -e
#
# Setup Python VirtualEnv if needed.
#
# Copyright (c) 2019 Endless Mobile Inc.
#
# Author: Joaquim Rocha <jrocha@endlessm.com>
#

# install or upgrade Python packages in a Python virtualenv

source_dir="$(git rev-parse --show-toplevel)"

# append the Flatpak build id (FLATPAK_ID) to the name of the virtual env, to
# ensure that it won't pick any existing local virtual env (which happens when
# building locally) since it needs to be properly set up from within the sandbox.
virtualenv_dir="${source_dir}/.python-virtual-env$FLATPAK_ID"

# Associative array of tools and the packages they come from.
declare -A virtualenv_tools
virtualenv_tools=(
    [flake8]=flake8
    [pysassc]=libsass
    [sphinx-build]=sphinx-autoapi
)

function activate_venv {
    echo "Activating virtual env $virtualenv_dir"
    source "$virtualenv_dir"/bin/activate
}

function setup_venv {
    local venv_needed
    local tool
    local pkg

    # Check if a venv is needed at all. On eos3.7 python3-venv is not
    # installed so a virtualenv can't be installed with the host's
    # python. However, pip is installed so a developer can install the
    # necessary packages without the virtualenv.
    venv_needed=false
    for tool in "${!virtualenv_tools[@]}"; do
        if ! type -p "$tool" &>/dev/null; then
            echo "$tool not found (virtual env needed for" \
                "package ${virtualenv_tools[$tool]})"
            venv_needed=true
            break
        fi
    done

    if ! "$venv_needed"; then
        echo "All tools found, virtual env not needed"
        return 0
    fi

    if [ ! -f "$virtualenv_dir"/bin/activate ]; then
        echo "Setting up virtual env $virtualenv_dir"
        python3 -mvenv "$virtualenv_dir"
        activate_venv
        echo "Upgrading pip"
        pip install --upgrade pip
    else
        activate_venv
    fi

    for tool in "${!virtualenv_tools[@]}"; do
        pkg="${virtualenv_tools[$tool]}"
        if [ ! -f "$virtualenv_dir/bin/$tool" ]; then
            echo "Installing $pkg"
            pip install "$pkg"
        fi
    done
}

function upgrade_venv {
    local pkg

    if [ ! -f "$virtualenv_dir"/bin/activate ]; then
        echo "No virtual env found in $virtualenv_dir" >&2
        return 1
    fi

    activate_venv
    echo "Upgrading virtual env $virtualenv_dir"
    echo "Upgrading pip"
    pip install --upgrade pip
    for pkg in "${virtualenv_tools[@]}"; do
        echo "Upgrading $pkg"
        pip install --upgrade "$pkg"
    done
}

# Setup the venv if executed
if [ "$0" = "$BASH_SOURCE" ]; then
    setup_venv
fi

# end: install or upgrade Python packages in a Python virtualenv
